#+HUGO_BASE_DIR: ..
#+HUGO_SECTION: wiki
#+HUGO_WEIGHT: 0

#+seq_todo: TODO DRAFT DONE
#+property: header-args :eval no

* Guix中国镜像
   :PROPERTIES:
   :EXPORT_FILE_NAME: mirror
   :END:

*** Git镜像

- Git镜像地址： =https://mirror.guix.org.cn/git/guix.git= （每十分钟同步一次）
- SJTUG的Git镜像地址： =https://git.sjtu.edu.cn/sjtug/guix.git= （每小时同步一次）

**** 让 ~guix pull~ 使用这个镜像

修改 =~/.config/guix/channels.scm= 文件：
#+begin_src scheme
  (list (channel
         (inherit (car %default-channels))
         (url "https://mirror.guix.org.cn/git/guix.git")))
#+end_src

*** Substitute镜像

- Substitute镜像地址： =https://mirror.guix.org.cn=
- SJTUG的Substitute镜像地址： =https://mirror.sjtu.edu.cn/guix/=

SJTUG的镜像服务器速度更快，建议大家使用SJTUG的镜像服务器。如果SJTUG的镜像服务器
运营顺利，Guix中文社区的镜像将在2021年5月1日停止维护。

**** 使用方法

将镜像地址添加到 ~guix-daemon~ 的substitute-urls参数里。

***** Guix system

修改 ~/etc/config.scm~ ：
#+begin_src scheme
  (operating-system
    (services (modify-services %desktop-services
                (guix-service-type
                 config => (guix-configuration
                            (inherit config)
                            (substitute-urls '("https://mirror.sjtu.edu.cn/guix/"
                                               "https://ci.guix.gnu.org"))))))
    ...
    )
#+end_src

***** Systemd

修改 ~guix-daemon.service~ ：
#+begin_src conf
  ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls="https://mirror.sjtu.edu.cn/guix/ https://ci.guix.gnu.org"
#+end_src

* 社区CI
   :PROPERTIES:
   :EXPORT_FILE_NAME: ci
   :END:

社区构建服务器地址： =https://ci.guix.org.cn/= 。

若使用此服务器，你需要先信任它的公钥。
#+begin_src sh
  guix archive --authorize <<EOF
  (public-key
   (ecc
    (curve Ed25519)
    (q #3BAC7C529783301896751EB5D4DAE186BDB3D5D7FB4D6B8588C2E9273FDB2CB3#)))
  EOF
#+end_src

目前此服务器没有提供特殊的软件包。

* 设置输入法
   :PROPERTIES:
   :EXPORT_FILE_NAME: input-method
   :END:

你可以选择使用 ~ibus~ 或者 ~fcitx~ 。

** 设置 ~ibus~
1. 安装 ~ibus~ 和 ~ibus-libpinyin~ （或 ~ibus-rime~ ）。 由于 ~ibus-setup~ 在运
   行时依赖 ~dconf~ ，所以你需要同时安装 ~dconf~ 。

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (packages (cons* ibus ibus-libpinyin dconf
                        %base-packages))
       ...
       )
   #+END_SRC

2. 设置环境变量。

   如果你使用GDM、SDDM等登录管理器（Login Manager/Display Manager），建议通过
   =~/.pam_environment= 文件设置用户的环境变量。

   例： =~/.pam_environment=
   #+begin_src conf
     GTK_IM_MODULE DEFAULT=ibus
     QT_IM_MODULE DEFAULT=ibus
     XMODIFIERS DEFAULT=@im=ibus

     GUIX_GTK2_IM_MODULE_FILE DEFAULT=/run/current-system/profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     GUIX_GTK3_IM_MODULE_FILE DEFAULT=/run/current-system/profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+end_src

   如果把 ~ibus~ 安装到user profile里，与上面类似，请替换这两个环境变量（但是作
   者没验证过是否可行）：
   #+BEGIN_SRC sh
     GUIX_GTK2_IM_MODULE_FILE DEFAULT=${HOME}/.guix-profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     GUIX_GTK3_IM_MODULE_FILE DEFAULT=${HOME}/.guix-profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+END_SRC

   如果你想使用传统的login shell配置文件方式设置环境变量，请修改对应login shell
   的配置文件。bash用户修改 =~/.profile= 文件，zsh用户修改 =~/.zprofile= 文件。

   注意：
   #+begin_quote
     Guix里的GDM不会自动执行用户的login shell，所以 =~/.profile= 文件里的环境变
     量在登录之后不会生效。推荐使用SDDM。
   #+end_quote

   例：
   #+BEGIN_SRC sh
     export GTK_IM_MODULE="ibus"
     export QT_IM_MODULE="ibus"
     export XMODIFIERS="@im=ibus"

     export GUIX_GTK2_IM_MODULE_FILE=/run/current-system/profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache
     export GUIX_GTK3_IM_MODULE_FILE=/run/current-system/profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache
   #+END_SRC

3. 如果你曾经安装过 ~ibus~ ，请删除 =~/.cache/ibus= 这个文件夹。不匹配的
   =~/.cache/ibus= 可能导致 ~ibus~ 无法启动。这是一个已知的bug。
   #+BEGIN_SRC shell
     rm -r ~/.cache/ibus
   #+END_SRC

4. 运行 ~ibus-daemon --xim --replace --daemonize~ 以启动 ~ibus-daemon~ 。
   #+BEGIN_SRC shell
     ibus-daemon --xim --replace --daemonize
   #+END_SRC

5. 运行 ~ibus-setup~ 进入设置界面，添加和设置输入法。
   #+BEGIN_SRC shell
     ibus-setup
   #+END_SRC

6. 好了，你可以使用 ~ibus~ 来输入中文了。

*重要：*
#+begin_quote
  如果 ~ibus~ 无法正常启动，请删除 =~/.cache/ibus= 之后再尝试一次。如果你更新了
  ~ibus~ 软件包，也需要删除 =~/.cache/ibus= 。这是一个已知的bug。
#+end_quote

** 设置 ~fcitx~
@pmeiyu 不使用fcitx，此段略。
* 在Guix System使用带有PAM支持的密码锁
   :PROPERTIES:
   :EXPORT_FILE_NAME: locker-with-pam
   :END:

由於Guix System使用 ~guix system~ 來管理 ~/etc/pam.d~ 所以帶有pam支持的程序需要
另外设置以生成 ~/etc/pam.d~ 下的文件。

1. 在系统配置文件中 ~services~ 字段加入 ~screen-locker-service~ 服务
   比如下面例子中的vlock终端密码锁，其他带有pam验证的锁屏工具等同。

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (screen-locker-service kbd "vlock"))
                  %base-services))
       ...
       )
   #+END_SRC
* 在不带有登录管理器的Guix System启动wayland会话
   :PROPERTIES:
   :EXPORT_FILE_NAME: wayland-without-login-manager
   :END:

由於Guix System使用 ~elogind~ 來替代了 ~systemd-logind~ ，所以在tty下启动wayland会话
需要在系统配置文件中另外加入 ~elogind~ ~dbus-system(elogind依赖)~  服务。

1. 在系统配置文件中 ~services~ 字段加入 ~elogind-service~ ~dbus-service~ 服务

   例： /etc/config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (elogind-service)
                   (dbus-service))
                  %base-services))
       ...
       )
   #+END_SRC

2. 在tty登录用户并启动wayland会话。

   例:
   #+BEGIN_SRC shell
     $ tty
     /dev/tty1
     $ sway
     ...
   #+END_SRC
* Guix中使用 ~guix environment --container~ 容器化应用程序会遇到的问题
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-environment-container-setup
   :END:

~guix environment --container~ 是一个可以随时手搓容器环境的强大功能。
在使用中会遇到以下问题，并附带解决方案，如果有多种解决方案请补充。

** 容器内 ~glibc~ 的 ~locale~ 问题

1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          -E^LANG$\
          -E^GUIX_LOCPATH$\
          --ad-hoc glibc-utf8-locales\
          ...
   #+END_SRC

** 容器内 ~tls~ 的证书问题

1. 在 ~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --expose=/etc/ssl \
          --ad-hoc nss-certs curl\
          ...
   #+END_SRC

*提示：*
#+begin_quote
  加入curl包的原因是它会提供许多tls应用使用的环境变量
#+end_quote
** 容器内访问容器外部的 ~wayland~ 会话
1. 在 ~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          -E^XDG_RUNTIME_DIR$\
          -E^WAYLAND_DISPLAY$\
          --share=${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}\
          ...
   #+END_SRC
** 容器内的字体问题
1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --link-profile
          --ad-hoc fontconfig\
          --ad-hoc font1\
          --ad-hoc font2\
          ...
   #+END_SRC

*警告：*
#+begin_quote
  请确保容器没有包括容器外的${HOME}/.guix-profile
#+end_quote

** 容器内的gtk主题

1. 在~guix environment --container~ 中加入以下选项:

   例：
   #+BEGIN_SRC shell
     guix environment --container\
          ...
          --expose=${HOME}/.gtkrc-2.0\
          --expose=${HOME}/.config/gtk-3.0/settings.ini\
          --ad-hoc gtk-theme1\
          --ad-hoc gtk-theme2\
          ...
          --ad-hoc icon-theme1\
          --ad-hoc icon-theme2\
          ...
   #+END_SRC
* Guix中使用 ~guix system vm~ 会遇到的问题
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-system-vm-setup
   :END:

** 运行的虚拟机无法写入 ~/gnu/store~

由于虚拟机使用9p文件系统和虚拟机外部主机只读共享/gnu/store下面的部分内容,
所以无法写入 ~/gnu/store~

如果需要独立的Guix System虚拟机请使用~guix system vm-image~生成虚拟机磁盘镜像,
并使用qemu载入启动

** 机器没有图形界面的情况下操纵虚拟机的控制台

有两种解决方法

*** 使用带有图形的机器使用VNC连接到虚拟机的显示器

   #+BEGIN_SRC shell
     # 运行有虚拟机的服务器
     /gnu/store/fs....sa-run-vm.sh -vnc :0
   #+END_SRC

   #+BEGIN_SRC shell
     # 拥有图形和vnc客户端的机器
     vncviewer <服务器的IP> 5900
   #+END_SRC

*警告：*
#+begin_quote
  VNC使用明文传输数据，请使用加密隧道进行连接
#+end_quote

*** 禁用虚拟机的图形界面并使用串口连接到机器的控制台

   在虚拟机系统配置文件中加入串口getty服务:

   例： vm-config.scm
   #+BEGIN_SRC scheme
     (operating-system
       (services (append
                  (list
                   (service mingetty-service-type
                            (mingetty-configuration
                             (tty "ttyS0")))
                  %base-services))
       ...
       )
   #+END_SRC

   在启动命令中加入 ~-nographic~ 选项
   #+BEGIN_SRC shell
     /gnu/store/fs....sa-run-vm.sh -nographic
   #+END_SRC

* Guix中使用纯 ~wayland~ 环境的时候需要设置的
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-pure-wayland-setupe
   :END:

** ~gtk~ 在纯 ~wayland~ 环境中运行

   1. 需要在环境变量中加入以下内容:

      #+BEGIN_SRC shell
        export GDK_BACKEND=wayland
      #+END_SRC

** ~qt~ 在纯 ~wayland~ 环境中运行

   1. 需要在环境变量中加入以下内容:

      #+BEGIN_SRC shell
        export QT_QPA_PLATFORM=wayland
      #+END_SRC

   2. 同时需要在qt软件的profile中安装 ~qtwayland~ 拓展
      以下是启动 ~fcitx5-configtool~ 中的 ~fcitx5-config-qt~ 的示例

      #+BEGIN_SRC shell
        export QT_QPA_PLATFORM=wayland
        guix environment --ad-hoc fcitx5-configtool qtwayland -- fcitx5-config-qt
      #+END_SRC

* Guix中使用 ~guile-studio~ 作为编写 ~guile~ 代码的环境
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-guile-studio
   :END:

第一次接触Guile可以使用 ~guile-studio~ 来编写 ~guile~ 代码，
它使用GNU Emacs作为编辑器，并集成了编写 ~guile~ 需要的插件，
并提供了开包即用的体验。

** 运行

   可以选择不安装它，它可以随时随地在拥有Guix的环境运行:

   #+BEGIN_SRC shell
     guix environment --ad-hoc emacs-no-x guile-studio -- guile-studio
   #+END_SRC

   也可以安装然后使用它:

   #+BEGIN_SRC shell
     guix package -i guile-studio emacs-no-x
     guile-studio
   #+END_SRC

** 使用

   可以使用方向键来移动光标进行编辑

   以下是一些经常会用到的快捷键:

   概念:

   快捷键: Ctrl = C, Alt/Meta = M
   窗口: ~guile-studio~ 启动的时候会默认创建两个窗口

   如果是新手建议先使用菜单提供的功能进行 ~打开/编辑/保存/保存~ 文件

   | 快捷键  | 功能                                  |
   |---------+---------------------------------------|
   | F10     | 打开菜单                              |
   | C+x o   | 切换到屏幕上的其他窗口                |
   | C+x 1   | 关闭当前窗口                          |
   | C+x 2   | 横向分割出一个窗口                    |
   | C+x 3   | 竖向分割出一个窗口                    |
   | C+Space | 开始选中内容                          |
   | Tab     | 选中内容并按下Tab，可以进行代码格式化 |
   | C+g     | 取消选中的内容                        |

   更多请查阅 GNU Emacs 的文档

* 在GuixSystem使用 ~kmscon~ 显示中文内容
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-system-use-kmscon
   :END:

   对于不需要图形环境的机器，可以选择 ~kmscon~ 服务来显示中文内容

   1. 在系统配置文件中添加以下内容:

      #+BEGIN_SRC scheme
        (operating-system
         (services (append
                    (list
                     (service kmscon-service-type
                      (kmscon-configuration
                       (virtual-terminal "tty5"))))  ; 这里更换为需要的tty
                    %base-services))
         ...
         )
      #+END_SRC

** 更多的字符显示支持

   写此博客的时候 ~kmscon~ 服务并未加入pango的字体选择功能，
   但是可以使用 ~unifont~ 字体引擎来获得更多字符显示的支持，

   #+BEGIN_SRC scheme
     (operating-system
      (services (append
                 (list
                  (service kmscon-service-type
                           (kmscon-configuration
                            ...
                            (virtual-terminal "tty5")
                            (font-engine "unifont")))) ; 使用unifont
                           %base-services))
                 ...
                 )
   #+END_SRC

* 使用 ~fdm~ ~mutt~ ~msmtp~ 设置简易的邮件环境
   :PROPERTIES:
   :EXPORT_FILE_NAME: fdm-mutt-msmtp-mail-env
   :END:

   作为Guix用户应该懂得如何使用邮件列表进行讨论

   | 软件   | 作用                       |
   |--------+----------------------------|
   | fdm    | 收邮件，过滤邮件，分类邮件 |
   | mutt   | 管理邮件                   |
   | msmtp  | 发邮件                     |
   | 编辑器 | 编写邮件                   |
   | 阅读器 | 阅读邮件                   |

   对于编辑器和阅读器，纯文本邮件并不会有太多的限制，
   可以自由选择自己喜欢的编辑器或阅读器。

** 安装

   安装软件包:
   #+BEGIN_SRC shell
     guix package -i fdm mutt msmtp
   #+END_SRC

   安装需要的编辑器和阅读器，这个示例使用 ~emacs~:
   #+BEGIN_SRC shell
     guix package -i emacs-no-x
   #+END_SRC

** 配置

   这里的例子有一个约定:

   ~${HOME}/Mail~ 作为本地邮件的存放位置，从远程服务器下载的邮件都会存放在这里。

   1. fdm
      创建一个配置文件:

      #+BEGIN_SRC shell
        umask 077 # 更严格安全的权限
        touch ~/.fdm.conf
      #+END_SRC

      并写入:

      #+BEGIN_SRC text
        ## .fdm.conf
        # 默认收件箱
        action "inbox" maildir "%h/Mail/inbox"
        # guix相关邮件收件箱
        action "guix" maildir "%h/Mail/guix"

        # 请取消注释并修改需要的内容
        # 账户设置 POP3
        #account "账户名" pop3s server "POP3服务器"
        # 账户设置 IMAP
        #account "账户名" imaps server "IMAP服务器"
        # 登录需要的
        #user "用户名" pass "密码"

        # 将带有 guix 内容的邮件放至guix收件箱
        match "guix" in headers action "guix"
        match "guix" in body action "guix"

        # 将其他邮件放至inbox
        match all action "inbox"
      #+END_SRC

    2. msmtp
       创建一个配置文件:

      #+BEGIN_SRC shell
        umask 077 # 更严格安全的权限
        touch ~/.msmtprc
      #+END_SRC

      并写入:

      #+BEGIN_SRC text
        account default
        host SMTP服务器
        protocol smtp
        auth on
        from 邮箱地址
        user 登录所需用户名，通常和邮箱地址相同
        password 密码
        tls on
        tls_starttls on
      #+END_SRC

    3. mutt

       #+BEGIN_SRC shell
         umask 077 # 更严格安全的权限
         touch ~/.muttrc
       #+END_SRC

      并写入:

      #+BEGIN_SRC text
        # 本地邮箱的设置
        set folder=~/Mail
        set mbox=+mbox
        set spoolfile=+inbox
        set record=+sent
        set sort=threads # 邮件列表建议的显示方式
        set postponed=+drafts
        set mbox_type=Maildir
        mailboxes +inbox

        # 这里示例使用Emacs作为阅读器和编辑器
        set editor='emacsclient -nw'
        set pager='emacsclient -nw'

        # 发送邮件的命令
        set sendmail="msmtp"
      #+END_SRC

** 使用

   使用流程如下:

   1. 收邮件

      #+BEGIN_SRC shell
        fdm -v fetch
      #+END_SRC

   2. 看邮件

      #+BEGIN_SRC shell
        mutt
      #+END_SRC

      使用快捷键 ~c~ 切换邮件的分类。
      使用 j/k 或者方向键移动光标。
      使用回车查看邮件邮件编辑器退出后会询问下一步的命令，
      一般输入 ~q~ 来回到列表，或者 ~j/k~ 来看上一个/下一个邮件。
      使用快捷键 ~d~ 为邮件添加删除标志，然后使用快捷键 ~$~ 提交更改删除它们。

   3. 发邮件

      #+BEGIN_SRC shell
        mutt
      #+END_SRC

      进入 ~mutt~ 之后使用快捷键 ~m~ 按照提示填写信息，之后会调用编辑器打开，
      保存关闭之后按照提示信息发送

      回复一个邮件时需要移动光标到这个邮件上使用快捷键 ~r~ 进行回复

** 邮件列表注意事项

   发送邮件到邮件列表之前通常需要订阅才可以送达至邮件列表
* 在GuixSystem中设置Gnome桌面和ibus输入法
   :PROPERTIES:
   :EXPORT_FILE_NAME: guix-system-gnome-ibus
   :END:

   让中文用户止步的通常是难以设置的桌面环境和输入法

   下文提供现成的Gnome环境+IBUS输入法的设置

** 设置系统服务

   1. 在系统配置文件中添加以下内容:

      #+BEGIN_SRC scheme
        (operating-system
         (services (append
                    (list
                         (service gnome-desktop-service-type)
                    %desktop-services))
         ...
         )
      #+END_SRC

** 设置系统包

   1. 在系统配置文件中添加以下内容:

      #+BEGIN_SRC scheme
        (operating-system
         (packages
          (append
           (list
            ibus ibus-rime dconf ;; 输入法
            font-gnu-unifont ;; 中文字体
           %base-packages))
         ...
         )
      #+END_SRC

** 用户的设置

    1. 可以使用 ~guix home~ 功能来设置环境

       在 ~guix home~ 配置文件加入以下内容:

       #+BEGIN_SRC scheme
         (home-environment
          (services
           (list
            (service home-bash-service-type
                 (home-bash-configuration
                   (guix-defaults? #t)
                   (environment-variables
                     `(
                       ;; IBUS 输入法
                       ("GTK_IM_MODULE" . "ibus")
                       ("QT_IM_MODULE" . "ibus")
                       ("XMODIFILERS" . "@im=ibus")
                       ("GUIX_GTK2_IM_MODULE_FILE" .  "/run/current-system/profile/lib/gtk-2.0/2.10.0/immodules-gtk2.cache")
                       ("GUIX_GTK3_IM_MODULE_FILE" .  "/run/current-system/profile/lib/gtk-3.0/3.0.0/immodules-gtk3.cache")
                       ))))
                 ...
                ))
            ...
         )
       #+END_SRC

** 结束

   1. 使用 ~guix system reconfigure~ 命令重新配置系统

   2. 使用 ~guix home reconfigure~ 命令重新配置HOME

   3. 登出，然后重新登入

   4. 进入 Gnome 的 Settings 添加 rime 输入法方案

   5. 使用 Super+Space 激活输入法，输入中文
